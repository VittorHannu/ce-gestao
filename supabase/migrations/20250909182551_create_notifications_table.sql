
-- Create the notifications table
CREATE TABLE public.notifications (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    title text NOT NULL,
    message text NOT NULL,
    read boolean DEFAULT false NOT NULL,
    link text
);

-- Add comments to the table and columns
COMMENT ON TABLE public.notifications IS 'Stores in-app notifications for users.';
COMMENT ON COLUMN public.notifications.user_id IS 'The user who will receive the notification.';
COMMENT ON COLUMN public.notifications.title IS 'The title of the notification.';
COMMENT ON COLUMN public.notifications.message IS 'The main content of the notification.';
COMMENT ON COLUMN public.notifications.read IS 'True if the user has read the notification.';
COMMENT ON COLUMN public.notifications.link IS 'An optional in-app path to navigate to when clicked.';

-- Enable Row Level Security
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view their own notifications"
ON public.notifications FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can update their own notifications"
ON public.notifications FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own notifications"
ON public.notifications FOR DELETE
USING (auth.uid() = user_id);

-- For now, allow any authenticated user to insert.
-- This will be tightened later if needed, but the trigger will run with the user's role.
CREATE POLICY "Authenticated users can insert notifications"
ON public.notifications FOR INSERT
TO authenticated
WITH CHECK (true);

